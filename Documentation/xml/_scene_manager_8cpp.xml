<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="_scene_manager_8cpp" kind="file" language="C++">
    <compoundname>SceneManager.cpp</compoundname>
    <includes refid="_scene_manager_8h" local="yes">Core/SceneManagement/SceneManager.h</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="10">
        <label>Core/export.h</label>
        <link refid="_export_8h"/>
      </node>
      <node id="4">
        <label>Core/Internal/AuthorizationBadge.h</label>
        <link refid="_authorization_badge_8h"/>
      </node>
      <node id="8">
        <label>Core/Internal/RTTI.h</label>
        <link refid="_r_t_t_i_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Core/SceneManagement/Scene.h</label>
        <link refid="_scene_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Core/SceneManagement/SceneManager.h</label>
        <link refid="_scene_manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ECS/Component/Components/Transform.h</label>
        <link refid="_transform_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ECS/Component/IComponent.h</label>
        <link refid="_i_component_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ECS/Entity/GameObject.h</label>
        <link refid="_game_object_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>GameObject.hxx</label>
        <link refid="_game_object_8hxx"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ECS/System/Tree.h</label>
        <link refid="_tree_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/seryl/Desktop/Fichiers/Ynov/cours/M1/EngineCPP/FrostEngine/FrostEngine/src/Core/SceneManager.cpp</label>
        <link refid="_scene_manager_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>glm/vec2.hpp</label>
      </node>
      <node id="11">
        <label>stduuid/uuid.h</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="15">
        <label>unordered_set</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacefrost">frost</innernamespace>
    <innernamespace refid="namespacefrost_1_1core">frost::core</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_scene_manager_8h" kindref="compound">Core/SceneManagement/SceneManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefrost_1_1core" kindref="compound">frost::core</ref></highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7" refid="classfrost_1_1core_1_1_scene_manager_1ae5963de250ff2e10c2063358c54687e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfrost_1_1core_1_1_scene_manager" kindref="compound">SceneManager</ref>&amp;<sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1ae5963de250ff2e10c2063358c54687e7" kindref="member">frost::core::SceneManager::GetInstance</ref>()</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classfrost_1_1core_1_1_scene_manager" kindref="compound">SceneManager</ref><sp/>instance;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="classfrost_1_1core_1_1_scene_manager_1a20388056002976929cbc0abeeac86f8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfrost_1_1core_1_1_scene" kindref="compound">Scene</ref>&amp;<sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1a20388056002976929cbc0abeeac86f8b" kindref="member">SceneManager::CreateScene</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_Name)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1ae48a2f1c7946e5484939c737cea883fe" kindref="member">AddScene</ref>(<ref refid="classfrost_1_1core_1_1_scene" kindref="compound">Scene</ref>({},<sp/>_Name));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::ranges::find_if(<ref refid="classfrost_1_1core_1_1_scene_manager_1a9aed8c346018827911fbd76979cf282c" kindref="member">m_scenes</ref>,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfrost_1_1core_1_1_scene" kindref="compound">Scene</ref>&amp;<sp/>_scene)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_scene.<ref refid="classfrost_1_1core_1_1_scene_1a9ed64d8f5f163d5170b75b426e022051" kindref="member">GetName</ref>()<sp/>==<sp/>_Name;<sp/>});</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1a9aed8c346018827911fbd76979cf282c" kindref="member">m_scenes</ref>.cend())</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::exception(</highlight><highlight class="stringliteral">&quot;No<sp/>scene<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*it;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classfrost_1_1core_1_1_scene_manager_1ae48a2f1c7946e5484939c737cea883fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1ae48a2f1c7946e5484939c737cea883fe" kindref="member">SceneManager::AddScene</ref>(<ref refid="classfrost_1_1core_1_1_scene" kindref="compound">Scene</ref>&amp;&amp;<sp/>_TargetScene)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::ranges::find_if(<ref refid="classfrost_1_1core_1_1_scene_manager_1a9aed8c346018827911fbd76979cf282c" kindref="member">m_scenes</ref>,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfrost_1_1core_1_1_scene" kindref="compound">Scene</ref>&amp;<sp/>_scene)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_scene.<ref refid="classfrost_1_1core_1_1_scene_1a9ed64d8f5f163d5170b75b426e022051" kindref="member">GetName</ref>()<sp/>==<sp/>_TargetScene.GetName();<sp/>})<sp/>!=<sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1a9aed8c346018827911fbd76979cf282c" kindref="member">m_scenes</ref>.end())</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Scene<sp/>with<sp/>the<sp/>same<sp/>name<sp/>already<sp/>exists&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1a9aed8c346018827911fbd76979cf282c" kindref="member">m_scenes</ref>.push_back(std::move(_TargetScene));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="classfrost_1_1core_1_1_scene_manager_1abe66ddc6ab1efdd67a0f743097da5d1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1abe66ddc6ab1efdd67a0f743097da5d1a" kindref="member">SceneManager::RemoveScene</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_SceneName)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::ranges::find_if(<ref refid="classfrost_1_1core_1_1_scene_manager_1a9aed8c346018827911fbd76979cf282c" kindref="member">m_scenes</ref>,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfrost_1_1core_1_1_scene" kindref="compound">Scene</ref>&amp;<sp/>_scene)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_scene.<ref refid="classfrost_1_1core_1_1_scene_1a9ed64d8f5f163d5170b75b426e022051" kindref="member">GetName</ref>()<sp/>==<sp/>_SceneName;<sp/>});</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1a9aed8c346018827911fbd76979cf282c" kindref="member">m_scenes</ref>.end())</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;No<sp/>scene<sp/>with<sp/>this<sp/>name<sp/>exists&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1a9aed8c346018827911fbd76979cf282c" kindref="member">m_scenes</ref>.erase(it);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classfrost_1_1core_1_1_scene_manager_1a53fb3404794a9d243be1049f7fb1192c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1a53fb3404794a9d243be1049f7fb1192c" kindref="member">SceneManager::LoadScene</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_SceneName)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::ranges::find_if(<ref refid="classfrost_1_1core_1_1_scene_manager_1a9aed8c346018827911fbd76979cf282c" kindref="member">m_scenes</ref>,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfrost_1_1core_1_1_scene" kindref="compound">Scene</ref>&amp;<sp/>_scene)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_scene.<ref refid="classfrost_1_1core_1_1_scene_1a9ed64d8f5f163d5170b75b426e022051" kindref="member">GetName</ref>()<sp/>==<sp/>_SceneName;<sp/>});</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1a9aed8c346018827911fbd76979cf282c" kindref="member">m_scenes</ref>.end())</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;No<sp/>scene<sp/>with<sp/>this<sp/>name<sp/>exists&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1a84d2fbbe14724c7f3e5a08ffc3840d3b" kindref="member">m_activeScene</ref><sp/>=<sp/>&amp;*it;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classfrost_1_1core_1_1_scene_manager_1a627cf41a8f9aab63d4c035cc01e28875" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfrost_1_1core_1_1_scene" kindref="compound">Scene</ref>&amp;<sp/><ref refid="classfrost_1_1core_1_1_scene_manager_1a627cf41a8f9aab63d4c035cc01e28875" kindref="member">SceneManager::GetActiveScene</ref>()</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classfrost_1_1core_1_1_scene_manager_1a84d2fbbe14724c7f3e5a08ffc3840d3b" kindref="member">m_activeScene</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;No<sp/>active<sp/>scene&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classfrost_1_1core_1_1_scene_manager_1a84d2fbbe14724c7f3e5a08ffc3840d3b" kindref="member">m_activeScene</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/seryl/Desktop/Fichiers/Ynov/cours/M1/EngineCPP/FrostEngine/FrostEngine/src/Core/SceneManager.cpp"/>
  </compounddef>
</doxygen>
